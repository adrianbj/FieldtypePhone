<?php

/**
 * ProcessWire Phone Fieldtype
 * by Adrian Jones with code from "Soma" Philipp Urlich's Dimensions Fieldtype module and Ryan's core FieldtypeDatetime module
 *
 * Field that stores 4 numeric values for country/area code/number/extension and allows for multiple formatting options.
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class FieldtypePhone extends Fieldtype implements Module, ConfigurableModule {


    public static function getModuleInfo() {
        return array(
            'title' => __('Phone Fieldtype', __FILE__), // Module Title
            'summary' => __('Multi part phone field, with custom output formatting options.', __FILE__), // Module Summary
            'version' => 106,
            'author' => 'Adrian Jones',
            'href' => 'http://modules.processwire.com/modules/fieldtype-phone/',
            'installs' => 'InputfieldPhone',
            'icon'     => 'phone'
        );
    }

    protected static $configDefaults = array(

        // global
        "example_country" => 1,
        "example_area_code" => 123,
        "example_number" => 4567890,
        "example_extension" => 321,
        "output_format" => "",
        "output_format_options" => "{+[phoneCountry] }{([phoneAreaCode]) }{[phoneNumber,0,3]-}{[phoneNumber,3,4]}{ x[phoneExtension]} /* Standard North America: +1 (111) 111-1111 x111 */
{+[phoneCountry] }{([phoneAreaCode]) }{[phoneNumber]}{ x[phoneExtension]} /* Alternate North America: +1 (111) 1111111 x111 */
{+[phoneCountry]-}{[phoneAreaCode]-}{[phoneNumber,0,3]-}{[phoneNumber,3,4]}{ x[phoneExtension]} /* Alternate North America: +1-111-111-1111 x111 */
{+[phoneCountry]-}{[phoneAreaCode]-}{[phoneNumber]}{ x[phoneExtension]} /* Alternate North America: +1-111-1111111 x111 */
{([phoneAreaCode,0,2]) }{[phoneNumber,0,4] }{ [phoneNumber,4,4]}{ x[phoneExtension]} /* Standard Australia without country code and with leading zero for area code: (01) 1111 1111 x111 */
{+[phoneCountry] }{([phoneAreaCode,1,1]) }{[phoneNumber,0,4] }{ [phoneNumber,4,4]}{ x[phoneExtension]} /* International Australia with country code and without leading zero for area code: +1 (1) 1111 1111 x111 */"
    );


    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();


    /**
     * Format the value for output, according to selected format and language
     *
     */
    public function ___formatValue(Page $page, Field $field, $value) {

        $output_format = $value->output_format ? $value->output_format : $this->data["output_format"];

        $value->formattedNumber = $this->formatPhone($value->country, $value->area_code, $value->number, $value->extension, $output_format);
        $value->formattedNumberNoCtryNoExt = $this->formatPhone(null, $value->area_code, $value->number, null, $output_format);
        $value->formattedNumberNoCtry = $this->formatPhone(null, $value->area_code, $value->number, $value->extension, $output_format);
        $value->formattedNumberNoExt = $this->formatPhone($value->country, $value->area_code, $value->number, null, $output_format);

        $value->unformattedNumberNoCtryNoExt = ($value->area_code ? $value->area_code : null) . ($value->number ? $value->number : null);
        $value->unformattedNumberNoCtry = ($value->area_code ? $value->area_code : null) . ($value->number ? $value->number : null) . ($value->extension ? $value->extension : null);
        $value->unformattedNumberNoExt = ($value->country ? $value->country : null) . ($value->area_code ? $value->area_code : null) . ($value->number ? $value->number : null);
        $value->unformattedNumber = $value->unformattedNumberNoExt . ($value->extension ? $value->extension : null);

        return $value;
    }

    /**
     *
     * Add mapping to different name for use in page selectors
     * This enables us to use it like "field.country=61, field.area_code=225, field.number=123456, field.extension=123"
     */
    public function getMatchQuery($query, $table, $subfield, $operator, $value) {
        if($subfield == 'country') $subfield = 'data';
        if($subfield == 'area_code') $subfield = 'data_area_code';
        if($subfield == 'number') $subfield = 'data_number';
        if($subfield == 'extension') $subfield = 'data_extension';
        return parent::getMatchQuery($query, $table, $subfield, $operator, $value);
    }

    /**
     * get Inputfield for this fieldtype, set config attributes so they can be used in the inputfield
     *
     */
    public function getInputfield(Page $page, Field $field) {
        $dim = $this->modules->get('InputfieldPhone');
        return $dim;
    }

    /**
     * there's none compatible
     *
     */
    public function ___getCompatibleFieldtypes(Field $field) {
        return null;
    }

    /**
     * blank value is an WireData object Phone
     *
     */
    public function getBlankValue(Page $page, Field $field) {
        return new Phone();
    }

    /**
     * Any value will get sanitized before setting it to a page object
     * and before saving the data
     *
     * If value not of instance Phone return empty instance
     */
    public function sanitizeValue(Page $page, Field $field, $value) {

        if(!$value instanceof Phone) $value = $this->getBlankValue($page, $field);

        // report any changes to the field values
        if($value->isChanged('country')
                || $value->isChanged('area_code')
                || $value->isChanged('number')
                || $value->isChanged('extension')
                || $value->isChanged('output_format')) {
            $page->trackChange($field->name);
        }

        return $value;
    }

    /**
     * get values converted when fetched from db
     *
     */
    public function ___wakeupValue(Page $page, Field $field, $value) {

        // get blank dim
        $dim = $this->getBlankValue($page, $field);

        // populate the dim
        if($value['data']) $dim->country = wire('sanitizer')->text($value['data']);
        if($value['data_area_code']) $dim->area_code = wire('sanitizer')->text($value['data_area_code']);
        if($value['data_number']) $dim->number = wire('sanitizer')->text($value['data_number']);
        if($value['data_extension']) $dim->extension = wire('sanitizer')->text($value['data_extension']);
        if($value['data_output_format']) $dim->output_format = wire('sanitizer')->text($value['data_output_format']);

        return $dim;
    }

    /**
     * return converted from object to array for storing in database
     *
     */
    public function ___sleepValue(Page $page, Field $field, $value) {

        // throw error if value is not of the right type
        if(!$value instanceof Phone)
            throw new WireException("Expecting an instance of Phone");

        $sleepValue = array(
            'data' => wire('sanitizer')->text($value->country),
            'data_area_code' => wire('sanitizer')->text($value->area_code),
            'data_number' => wire('sanitizer')->text($value->number),
            'data_extension' => wire('sanitizer')->text($value->extension),
            'data_output_format' => wire('sanitizer')->text($value->output_format)
            );

        return $sleepValue;
    }

    /**
     * Get the database schema for this field
     *
     * @param Field $field In case it's needed for the schema, but usually should not.
     * @return array
     */
    public function getDatabaseSchema(Field $field) {

        $schema = parent::getDatabaseSchema($field);
        $schema['data'] = 'char(15) NOT NULL';
        $schema['data_area_code'] = 'char(15) NOT NULL';
        $schema['data_number'] = 'char(15) NOT NULL';
        $schema['data_extension'] = 'char(15) NOT NULL';
        $schema['data_output_format'] = 'varchar(255) NOT NULL';
        // key for data will already be added from the parent
        $schema['keys']['data_area_code'] = 'KEY data_area_code(data_area_code)';
        $schema['keys']['data_number'] = 'KEY data_number(data_number)';
        $schema['keys']['data_extension'] = 'KEY data_extension(data_extension)';
        $schema['keys']['data_output_format'] = 'KEY data_output_format(data_output_format)';
        return $schema;
    }

    /**
     * Get any inputfields used for configuration of this Fieldtype.
     *
     * This is in addition to any configuration fields supplied by the parent Inputfield.
     *
     * @param Field $field
     * @return InputfieldWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        $modules = wire('modules');
        $config = wire('config');

        $modules->addHookBefore('saveModuleConfigData', null, 'InputfieldPhone_saveModuleConfigData');

        foreach(self::$configDefaults as $key => $value) {
            if(!isset($data[$key]) || $data[$key]=='' || $data[$key]=='~') $data[$key] = $value;
        }

        $fieldtypePhone = new FieldtypePhone();
        $data = array_map( array( $fieldtypePhone, 'removeTilde'), $data);


        $inputfields = new InputfieldWrapper();

        $f = $modules->get('InputfieldSelect');
        $f->attr('name', 'output_format');
        $f->label = __('Phone Output Format');
        $f->description = __("Select the format to be used when outputting phone numbers.\n\nYou can define new formats for this dropdown select in the options field below.");
        $f->addOption('', __('None'));

        foreach(explode("\n",$data["output_format_options"]) as $format){
            $format_stripped = trim(preg_replace('!/\*.*?\*/!s', '', $format));
            $phoneNumberFormatted = self::formatPhone($data["example_country"], $data["example_area_code"], $data["example_number"], $data["example_extension"], $format);
            $f->addOption($format_stripped, $phoneNumberFormatted . str_replace ($format_stripped, '', $format));
            if(strpos($data["output_format"], $format_stripped) !== false) $f->attr('value', $format_stripped);
        }

        $inputfields->add($f);


        $f = $modules->get("InputfieldTextarea");
        $f->attr('name', 'output_format_options');
        $f->attr('value', $data["output_format_options"]);
        $f->attr('rows', 10);
        $f->label = __('Phone Output Format Options');
        $f->description = __("Edit the defined formats here.\nOnce saved, they will be available for the default Phone Output Format selector on this page, as well as the Format Override selector when entering data for phone number fields.\n\nOne format per line.\n\nEach component of the phone number is surrounded by { }\nThe names of the component parts are surrounded by [ ]\nTwo optional comma separated numbers after the component name are used to get certain parts of the number using php's substr function, allowing for complete flexibility.\nAnything outside the [ ] is used directly: +,-,(,),x, spaces, etc - whatever you want to use.\n\nOptional descriptions can be included at the end of each line between /* */ tags.\n\nYou can reset to the default options by emptying this field and saving.\n\nPlease send me a PR on Github, or post to the support forum any new formats you create that you think others would find useful.");
        $f->collapsed = Inputfield::collapsedYes;
        $inputfields->add($f);


        $fieldset = $modules->get("InputfieldFieldset");
        $fieldset->attr('id', 'example_number_options');
        $fieldset->label = "Example Number Options";
        $fieldset->collapsed = Inputfield::collapsedYes;
        $inputfields->add($fieldset);


        $f = $modules->get("InputfieldText");
        $f->attr('name', 'example_country');
        $f->attr('value', $data["example_country"]);
        $f->attr('size', 20);
        $f->label = __('Example Country Code');
        $f->description = __('The number(s) you want to use for the country code in the format example.');
        $fieldset->add($f);


        $f = $modules->get("InputfieldText");
        $f->attr('name', 'example_area_code');
        $f->attr('value', $data["example_area_code"]);
        $f->attr('size', 20);
        $f->label = __('Example Area Code');
        $f->description = __('The number(s) you want to use for the area code in the format example.');
        $fieldset->add($f);


        $f = $modules->get("InputfieldText");
        $f->attr('name', 'example_number');
        $f->attr('value', $data["example_number"]);
        $f->attr('size', 20);
        $f->label = __('Example Phone Number');
        $f->description = __('The numbers you want to use for the phone number in the format example.');
        $fieldset->add($f);


        $f = $modules->get("InputfieldText");
        $f->attr('name', 'example_extension');
        $f->attr('value', $data["example_extension"]);
        $f->attr('size', 20);
        $f->label = __('Example Extension');
        $f->description = __('The number(s) you want to use for the extension in the format example.');
        $fieldset->add($f);


        return $inputfields;
    }


    /**
     * Format a phone number with the given number format
     *
     * @param text $phoneCountry country code
     * @param text $phoneAreaCode area code
     * @param text $phoneNumber number
     * @param text $phoneExtension phone extension
     * @param string $format to use for formatting
     * @return string Formatted phone string
     *
     */
    static public function formatPhone($phoneCountry, $phoneAreaCode, $phoneNumber, $phoneExtension, $format) {

        if(!$phoneNumber) return '';
        if(!strlen($format) || $format == '%s') return ($phoneCountry ? $phoneCountry : null) . ($phoneAreaCode ? $phoneAreaCode : null) . ($phoneNumber ? $phoneNumber : null) . ($phoneExtension ? $phoneExtension : null); // no formatting

        $pattern = preg_match_all("/{(.*?)}/", $format, $components);

        $finalvalue = '';
        foreach ($components[1] as $component) {

            $prefix = strstr($component, '[', TRUE);
            $suffix = str_replace(']','',strstr($component, ']'));

            $component = str_replace(array($prefix, $suffix, '[', ']'), null, $component);

            if (strcspn($component, '0123456789') != strlen($component)){
                    $component_name = strstr($component, ',', TRUE);
                    $char_cutoffs = explode(',',ltrim(str_replace($component_name, '', $component),','));
                    $value = substr($$component_name, $char_cutoffs[0], $char_cutoffs[1]);
            }
            else{
                $component_name = $component;
                $value = $$component_name;
            }

            $finalvalue .= ($value ? $prefix . $value . $suffix : null);

        }

        return $finalvalue;

    }

    /**
     * Helper function to remove any ~ from the format example numbers
     *
     */
    public static function removeTilde($value) {
        return str_replace('~', '', $value);
    }

}


/**
 * Helper function to prepend a ~ to the format example numbers to prevent wireEncodeJSON from stripping leading zeros
 *
 */
function InputfieldPhone_saveModuleConfigData(HookEvent $event) {
    $arguments = $event->arguments;
    if($arguments[0] != 'FieldtypePhone') return;
    $data = $arguments[1];
    foreach ($data as $key => $value) {
        $data[$key] = strpos($key,'example_') !== false  ? '~' . $value : $value;
    }
    $name = 'replacements';
    if(!is_array($data[$name])) $data[$name] = InputfieldPageName::replacementStringToArray($data[$name]);
    $arguments[1] = $data;
    $event->arguments = $arguments;
}


/**
 * Helper WireData Class to hold a Phone object
 *
 */
class Phone extends WireData {

    public function __construct() {
        $this->set('country', null);
        $this->set('area_code', null);
        $this->set('number', null);
        $this->set('extension', null);
        $this->set('output_format', null);
    }

    public function set($key, $value) {

        if($key == 'country' || $key == 'area_code' || $key == 'number' || $key == 'extension') {
            // if value isn't numeric, don't change the value if already
            // one set, else set it to 0 and throw an exception so it can be seen on API usage
            if(!is_numeric($value) && !is_null($value)) {
                $value = $this->$key ? $this->$key : '';
                throw new WireException("Phone Object only accepts numbers");
            }
        }
        return parent::set($key, $value);
    }

    public function get($key) {
        return parent::get($key);
    }

    public function __toString() {
        return (string)$this->formattedNumber;
    }

}